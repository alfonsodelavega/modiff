[%
var REMOVED_FG = "#CC3311";
var REMOVED_BG = "#f59d89";

var ADDED_FG = "#228833";
var ADDED_BG = "#99e6a6";

var CHANGED_BG = "#ffffe6";

var BLACK = "#000000";

%]
@startuml
skinparam roundCorner 0
skinparam objectBorderThickness 1
hide circle
!pragma layout smetana

[%
var addedClasses : Set;
var removedClasses : Set;

var changedClasses : Map; // more complex than the previous two sets 

// 1. find added, removed classes
// 2. find changed classes. These are trickier later, because a class is considered
//    changed if any of its features or operations (or parameters) change.
//    More comments on changedClasses in the registerChangedClass operation below

// focus at first on the differences directly related to classes
var classDifferences = munidiff.differences.select(d | d.getDiffElement().isTypeOf(EClass));

for (classDiff in classDifferences) {
	var elem = classDiff.getDiffElement();
	if (classDiff.isTypeOf(AddedElement)) {
		addedClasses.add(elem);
	}
	else if (classDiff.isTypeOf(RemovedElement)) {
		removedClasses.add(elem);
	}
	else {
		// 2. register changed classes (more complicated than just adding them to a list)
		registerChangedClass(classDiff);
	}
}

// process the rest of the differences now
for (d in munidiff.differences.excluding(classDifferences)) {
	var elem = d.getDiffElement();
	if (elem.isKindOf(EStructuralFeature)) {
		// 2. changed features means changed class. Register the class (if not
		//    registered before as added or deleted) and the difference
		var eclass = elem.eContainingClass;
		if (not addedClasses.includes(eclass) and not removedClasses.includes(eclass)) {
			addFeatureDifference(d);
		}
	}
	//TODO: enums, data types, packages, annotations, operations, parameters
}


// 3. Render

for (c in addedClasses.includingAll(removedClasses)) {
	var fg_color = addedClasses.contains(c) ? ADDED_FG : REMOVED_FG;
	var bg_color = addedClasses.contains(c) ? ADDED_BG : REMOVED_BG;
%]
	class "[%=c.name%]" as [%=c.getNodeId()%] [%=bg_color%] {
[%  for (attr in c.eAttributes) {%]
		[%=attr.name%]: [%=attr.eAttributeType.name%]
[%  } %]
	}
[%
}

for (classId in changedClasses.keySet()) {
	var changedClass = changedClasses.get(classId);
	var someClass = changedClass.fromClass.isDefined() ? changedClass.fromClass : changedClass.toClass;%]
	
	class "[%=someClass.getClassName()%]" as [%=someClass.getNodeId()%] [%=CHANGED_BG%] {
[%  
	// class with potential changes and/or feature additions and removals
	var attrDifferences = changedClass.differences.select(d | d.getDiffElement().isTypeOf(EAttribute));
	
	var changeDifferences = changedClass.differences.select(d | d.isTypeOf(ChangedElement));

	var addedAttributes = changedClass.differences.select(d | d.isTypeOf(AddedElement))
			.collect(d | d.element);

	var removedAttributes = changedClass.differences.select(d | d.isTypeOf(RemovedElement))
			.collect(d | d.element);
	
	var fromAttributes;
	var fromIndex = 0;
	var toAttributes;
	var toIndex = 0;
	
	if ((not changedClass.fromClass.isDefined()) or 
			(attrDifferences.notEmpty() and attrDifferences.forAll(d | d.isTypeOf(AddedElement)))) {
		
		fromAttributes = Sequence {};
		toAttributes = changedClass.toClass.eAttributes;
	}
	else if (not changedClass.toClass.isDefined() or 
			(attrDifferences.notEmpty() and attrDifferences.forAll(d | d.isTypeOf(RemovedElement)))) {

		fromAttributes = changedClass.fromClass.eAttributes;
		toAttributes = Sequence {};
	}
	else {
		// most tedious case: lists might be of difference length, content, and order
		// hence the alternating loop ahead
		fromAttributes = changedClass.fromClass.eAttributes;
		toAttributes = changedClass.toClass.eAttributes;
	}

	var renderedAttributes = Set {}; // to avoid duplicate renderings later

	while (fromIndex < fromAttributes.size() and toIndex < toAttributes.size()) {
		var fromAttr = fromAttributes.get(fromIndex);
		var toAttr = toAttributes.get(toIndex);

		if (fromAttr.getNodeId() == toAttr.getNodeId()) {
			if (changeDifferences.exists(d | d.fromElement = fromAttr)) {
				renderAffectedAttribute(getPlusSign(), ADDED_FG, toAttr);
				renderAffectedAttribute(getMinusSign(), REMOVED_FG, fromAttr);
			}
			else {
				renderAttribute(fromAttr);
			}
			fromIndex += 1;
			toIndex += 1;
		}
		else {
			if (addedAttributes.includes(toAttr)) {
				renderAffectedAttribute(getPlusSign(), ADDED_FG, toAttr);
				toIndex += 1;
			}
			else if (removedAttributes.includes(fromAttr)) {
				renderAffectedAttribute(getMinusSign(), REMOVED_FG, fromAttr);
				fromIndex += 1;
			}
			else {
				// we might arrive at this case if attributes are reordered
				// in the class, and they are not modified (so they are not)
				// detected as changed
				// we would also need an attribute change (or an addition and a
				// removal) to arrive at this case (apart from the reordering)
				
				// look ahead the list of attributes to see if it's a common one
				if (renderedAttributes.includes(toAttr.getNodeId())) {
					toIndex += 1; // already rendered
				}
				else if (fromAttributes.hasAttribute(toAttr, fromIndex)) {
					renderAttribute(toAttr);
					renderedAttributes.add(toAttr.getNodeId());
					toIndex += 1;
				}

				if (renderedAttributes.includes(fromAttr.getNodeId())) {
					fromIndex += 1; // already rendered
				}
				else if (toAttributes.hasAttribute(fromAttr, toIndex)) {
					renderAttribute(fromAttr);
					renderedAttributes.add(fromAttr.getNodeId());
					fromIndex += 1;
				}
			}
		}
	}
	// only one of these loops would be entered
	while (fromIndex < fromAttributes.size()) {
		var attr = fromAttributes.get(fromIndex);
		fromIndex += 1;
		if (attrDifferences.includes(attr)) {
			renderAffectedAttribute(getMinusSign(), REMOVED_FG, attr);
		}
		else {
			renderAttribute(attr);
		}
	}
	while (toIndex < toAttributes.size()) {
		var attr = toAttributes.get(toIndex);
		toIndex += 1;
		if (addedAttributes.includes(attr)) {
			renderAffectedAttribute(getPlusSign(), ADDED_FG, attr);
		}
		else {
			renderAttribute(attr);
		}
	}%]
	}
[%
}

// now that all affected classes are rendered, add references between them.

var renderedClasses : Set = addedClasses.includingAll(removedClasses)
		.collect(c | c.getNodeId())
		.includingAll(changedClasses.keySet())
		.asSet();

// references of added/removed classes (only one edge of the appropriate color)
for (c in addedClasses.includingAll(removedClasses)) {
	var fg_color = addedClasses.contains(c) ? ADDED_FG : REMOVED_FG;
	for (ref in c.eReferences) {
		var refClass = ref.eReferenceType;
		addReference(renderedClasses, c, ref, fg_color);
	}
	for (superType in c.eSuperTypes) {
		addInheritance(renderedClasses, c, superType, fg_color);
	}
}

// references of changed classes:
//   - one edge for unchanged/added/removed refs
//   - two for refs with changed type, cardinality (what else?)

for (classId in changedClasses.keySet()) {
	var changedClass = changedClasses.get(classId);
	var someClass = changedClass.fromClass.isDefined() ? changedClass.fromClass : changedClass.toClass;
	
	var refDifferences = changedClass.differences.select(d | d.getDiffElement().isTypeOf(EReference));
	
	for (diff in refDifferences) {
		if (diff.isTypeOf(ChangedElement)) {
			addReference(renderedClasses, someClass, diff.toElement, ADDED_FG);
			addReference(renderedClasses, someClass, diff.fromElement, REMOVED_FG);
		}
		else {
			var fgColor = diff.isTypeOf(AddedElement) ? ADDED_FG : REMOVED_FG;
			addReference(renderedClasses, someClass, diff.getDiffElement(), fgColor);
		}
	}

	// rendering inheritance changes
	var classDiff = changedClass.differences.selectOne(d | d.getDiffElement().isTypeOf(EClass));
	if (classDiff.isDefined() and classDiff.changedFeatures.exists(f | f.name = "eSuperTypes")) {
		// TODO: a superType can be in both if unchanged (and using multiple supertypes)
		for (fromSuperType in classDiff.getFromElement().eSuperTypes) {
			addInheritance(renderedClasses, someClass, fromSuperType, REMOVED_FG);
		}
		for (toSuperType in classDiff.getToElement().eSuperTypes) {
			addInheritance(renderedClasses, someClass, toSuperType, ADDED_FG);
		}
	}
}
%]
@enduml
[%
operation EClass getClassName() {
	var name = self.name;
	if (self.abstract) {
		name = "//" + name + "//"; // italics
	}
	return name;
}

operation Any getNodeLabel() {
	return labelProvider.getLabel(self);
}

operation Any getNodeId() {
	return self.getNodeLabel()?.replaceAll("[^A-Za-z0-9]","") + "id";
}

/*
	fields of the changedClass tuple:
		fromClass:   modified class from the from file
		toClass:     modified class from the to file
		differences: list of differences
		
	A class might have only a fromClass or a toClass reference. That means that
	class is a deleted one or an added one, respectively.
	
	A changed class (with a fromClass and a toClass) can be so by changes on any
	of its contained elements:
		- Estructuralfeatures: attributes and references
		- EOperations: and their parameters
	
	This last bit means that changed classes are trickier to detect and register
	as a tuple, which reflects in the transformation code above
*/
operation registerChangedClass(difference) {
	var classId = difference.getDiffElement().getNodeId();
	var changedClass = changedClasses.get(classId);
	if (changedClass.isUndefined()) {
		changedClass = new Tuple(
				fromClass = difference.fromElement,
				toClass = difference.toElement,
				differences = Sequence {difference});
		
		changedClasses.put(classId, changedClass);
	}
	// registering changed classes takes place first thing in the transformation,
	// and each class should only appear as changed once
	else {
		"THIS SHOULD NOT HAPPEN!!".println();
	}
}

operation addFeatureDifference(difference) {
	var classId = difference.getDiffElement().eContainingClass.getNodeId();
	var changedClass = changedClasses.get(classId);
	if (changedClass.isDefined()) {
		changedClass.differences.add(difference);
		
		// fromClass or toClass could be yet incomplete from previous differences
		// example: first a removed feature is found (fromClass is set, toClass is not),
		// and after that an added one appears (allowing to set toClass as well to draw both later)
		if (changedClass.fromClass.isUndefined() and difference.isTypeOf(RemovedElement)) {
			changedClass.fromClass = difference.element.eContainingClass;
		}
		else if (changedClass.toClass.isUndefined() and difference.isTypeOf(AddedElement)) {
			changedClass.toClass = difference.element.eContainingClass;
		}
	}
	// if the class is not in changed classes, then this is a change that is
	// present only in its subelements (features, operations)
	else {
		var changedClass = new Tuple(
				differences = Sequence {difference});
		changedClasses.put(classId, changedClass);
		
		// determine fromClass, toClass or both (depending on the diff)
		if (difference.isTypeOf(ChangedElement)) {
			changedClass.fromClass = difference.fromElement.eContainingClass;
			changedClass.toClass = difference.toElement.eContainingClass;
		}
		else if (difference.isTypeOf(AddedElement)) {
			changedClass.toClass = difference.element.eContainingClass;
		}
		else { // removed
			changedClass.fromClass = difference.element.eContainingClass;
		}
	}
}

operation Any getDiffElement() {
	if (self.isTypeOf(ChangedElement)) {
		return self.fromElement;
	}
	return self.element;
}

operation Any getAttributeValue(attr) {
	var value = self.eGet(attr) + "";
	value = value.escapeXml();
	var chopped = false;
	if (value.indexOf("\n").asVar("newLineIndex") > -1) {
		value = value.substring(0, newLineIndex);
		chopped = true;
	}
	if (value.length() > 25) { 
		value = value.substring(0, 25);
		chopped = true;
	}
	if (chopped) value += " ...";
	return value;
}

operation getPlusSign() {
	return "<size:8><" + ADDED_FG + ":heavy_plus_sign:></size>";
}

operation getMinusSign() {
	return "<size:8><" + REMOVED_FG + ":heavy_minus_sign:></size>";
}

operation renderCommonClass (c) { %]
	class "[%=c.name%]" as [%=c.getNodeId()%] {
[%  for (attr in c.eAttributes) { 
		renderAttribute(attr);
	} %]
	}
[%
}

operation renderAttribute(attr) {%]
	[%=attr.name%] : [%=attr.eAttributeType.name%][%=attr.getCardinality()%]
[%
}

operation renderAffectedAttribute(sign, color, attr) {%]
	[%=sign%] <color:[%=color%]>[%=attr.name%] : [%=attr.eAttributeType.name%][%=attr.getCardinality()%]</color>
[%
}

operation Any hasAttribute(attr, index) {
	var attrId = attr.getNodeId();
	while (index < self.size()) {
		if (attrId == self.get(index).getNodeId()) {
			return true;
		}
		index += 1;
	}
	return false;
}

operation ETypedElement getCardinality() {
	var cardinality = "";
	if (self.many) {
		var upperBound = self.upperBound < 0 ? "*" : self.upperBound;
		cardinality = " [" + self.lowerBound + ".." + upperBound + "]";
	}
	return cardinality;
}

operation addInheritance(renderedClasses, subType, superType, color) {
	renderIfNeeded(renderedClasses, superType);
	addInheritance(subType, superType, color);
}

operation addInheritance(subType, superType, color) {%]
	[%=superType.getNodeId()%] <|-- [%=subType.getNodeId()%] [%=color%]
[%
}

operation addReference(renderedClasses, elem, ref, color) {
	renderIfNeeded(renderedClasses, ref.eReferenceType);
	addReference(elem, ref, color);
}

operation renderIfNeeded(renderedClasses, clazz) {
	var id = clazz.getNodeId();
	if (not renderedClasses.contains(id)) {
		renderCommonClass(clazz);
		renderedClasses.add(id);
	}
}

operation addReference(elem, ref, color) {
	addReference(elem.getNodeId(), ref.eReferenceType.getNodeId(), ref.name, 
			ref.getCardinality(), ref.containment, color);
}

operation addReference(sourceId, targetId, referenceName, cardinality, isContainment, color) {%]
	[%=sourceId%] [%=isContainment? "*" : ""%]--> "<color:[%=color%]>[%=referenceName%][%=cardinality%]</color>" [%=targetId%] [%=color%]
[%
}

%]